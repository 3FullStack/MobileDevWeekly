{"name":"MobileDevWeekly","tagline":"平安科技移动开发二队技术周报","body":"# [平安科技移动开发二队技术周报](https://github.com/PaicHyperionDev/MobileDevWeekly)（第三十二期）\r\n\r\n## Android开发\r\n\r\n#### 1）[安卓模拟器2.0初探](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1218/3786.html)\r\n\r\n我相信每一个安卓开发者都会同意 2015年安卓开发者大会上宣布的最大事情就是 Android Studio 2.0和安卓模拟器2.0，其中安卓模拟器2.0宣称运行和部署应用的速度比第一个版本快得超乎寻常。\r\n\r\n#### 2）[React-Native-Android小结](http://blog.kazaff.me/2015/12/21/React-Native-Android%E5%B0%8F%E7%BB%93/)\r\n\r\n最近尝试使用react-native android为我们的一个创业项目写了一个demo，项目放在github了，有兴趣的朋友可以看看。\r\n\r\n#### 3）[Android WebView远程执行代码漏洞浅析](http://www.freebuf.com/vuls/90552.html)\r\n\r\n在过去的一段时间里，WebView远程代码执行漏洞可以说是横扫了一大批的Android App，查询一些漏洞平台可以得到大致的情况，鉴于很多存在漏洞的App并没有披露，因此WebVeiw远程执行代码漏洞的影响程度会更大。由于Google Android 系统碎片化程度很高，大量的Android系统无法得到及时有效地更新，这个漏洞目前依然在被利用。\r\n\r\n#### 4）[Android性能优化之如何避免Overdraw](http://www.jianshu.com/p/145fc61011cd)\r\n\r\nOverdraw就是过度绘制，是指在一帧的时间内（16.67ms）像素被绘制了多次，理论上一个像素每次只绘制一次是最优的，但是由于重叠的布局导致一些像素会被多次绘制，而每次绘制都会对应到CPU的一组绘图命令和GPU的一些操作，当这个操作耗时超过16.67ms时，就会出现掉帧现象，也就是我们所说的卡顿，所以对重叠不可见元素的重复绘制会产生额外的开销，需要尽量减少Overdraw的发生。\r\n\r\n#### 5）[终端应用开发指南](http://mp.weixin.qq.com/s?__biz=MjM5NDAxNTY4MA==&mid=401407608&idx=1&sn=b858c2ccfa26b90c7fd4083b64ab9aef&3rd=MzA3MDU4NTYzMw==&scene=6#rd)\r\n\r\n中国移动一年前发布的一个面向终端厂商和应用厂商提出规范性建议，旨在推动终端、网络、应用各方共同努力，开发用户体验更加良好的应用产品，至今仍有借鉴意义。\r\n\r\n#### 6）[Android的multidex带来的性能问题－减慢app启动速度](http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1223/3796.html)\r\n\r\n在安卓社区中，65k方法数的限制是一个被多次提及的问题。目前解决这个问题的办法就是用multidex。虽然multidex是谷歌给出的一个非常棒的办法，但是我发现了它对app启动性能存在严重的影响，这点还没有在社区引起重视。我这篇文章的就是为那些还没有听说过这个问题（但是想使用multidexing）的开发者以及那些使用了multidexing，但是想观察本文解决办法所能赢得性能的伙伴而写的。\r\n\r\n\r\n## iOS开发\r\n\r\n#### 1）[iOS 视图，动画渲染机制探究](http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=402348480&idx=1&sn=7f737a96b9a9e7baad12b48ebc6b1efe&scene=0&key=ac89cba618d2d9765dea8e02c0365bc4a490199938ebd108346b0361994543a6ae2a4655870436a42627968d2beac841&ascene=0&uin=MjAyNzY1NTU%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.1+build(15B42)&version=11020201&pass_ticket=YYDGAMjGcYJJlj%2Bh72BXctaqS6yuDJlVNZ6LhIpUFMc%3D)\r\n\r\n终端的开发，首当其冲的就是视图、动画的渲染，切换等等。用户使用 App 时最直接的体验就是这个界面好不好看，动画炫不炫，滑动流不流畅。UI就是 App 的门面，它的体验伴随着用户使用 App 的整个过程。如果UI失败，用户是不会有打开第二次的欲望的。\r\n\r\n#### 2）[基于面向协议MVP模式下的软件设计－(iOS篇)](http://www.jianshu.com/p/f7ff18ac1c31)\r\n\r\n相信就算你是个iOS新手也应该听说过MVC的，MVC是构建iOS App的标准模板。随着时间的推移，在iOS平台上MVC也逐渐开始面临着越来越多的问题,最近又开始流行MVVM,MVVM使由MVC衍生而来，MVVM作为一种新的开发模式和响应式编程相结合用来解决一部分业务场景等，本文将给大家介绍的是一个新的方式来架构你的App: Model-View-Protocol,暂时可以理解为是基于协议的一种设计规范,拿出你的流行语bingo card，因为我们即将进行一次范式转变。\r\n\r\n#### 3）[如何在 Swift 中使用 Alamofire 进行网络编程](http://swift.gg/2015/12/22/alamofire-beginner-guide/)\r\n\r\n2014 年 6 月 Apple 发布 Swift 以来，如何在 Swift 中进行网络编程一直成为程序猿们关注的焦点。甚至就连 Swift 的作者之一 Chris Lattner 也发推说过，在 Swift 中解析 JSON 还有很长的路要走。因此，许多人开始寻求替代方案。在 Swift 中虽然有处理 JSON 解析的内建类，但是对开发者来说并不是很友好。幸运的是，Alamofire 出现了。Alamofire 是一个可以帮助我们解析 JSON 的强力网络库，它由 Objective-C 中同类网络库 AFNetworking 的作者编写。\r\n\r\n#### 4）[ARC下需要注意的内存管理](http://www.jianshu.com/p/556ba33fa498)\r\n\r\n之前发了一篇关于图片加载优化的文章，还是引起很多人关注的，不过也有好多人反馈看不太懂，这次谈谈iOS中ARC的一些使用注意事项，相信做iOS开发的不会对ARC陌生啦。这里不是谈ARC的使用，只是介绍下ARC下仍然可能发生的内存泄露问题，可能不全，欢迎大家补充。\r\n\r\n#### 5）[iOS 开发中的 Self-Manager 模式](http://blog.sunnyxx.com/2015/12/19/self-manager-pattern-in-ios/)\r\n\r\n赋予一个 Widget 更大的权利，让其自己负责自己的事件。\r\n\r\n\r\n## 技术纵横\r\n\r\n#### 1）[React Native的架构设计](http://segmentfault.com/a/1190000004161358)\r\n\r\n用RN最大的难题是设计思想的转变，以前的设计方法论已经不太适用了。而RN仅仅提供了view的框架，构建完整app的架构并没有直接提供。考虑目前遇到的如下问题，希望架构给出解决方案。\r\n\r\n* 交互：如何解决组件间通信【父子、子父、兄弟等，特别是跨层or反向数据流动等】；用state还是接口操作组件；\r\n* 职责：组件状态放哪，业务逻辑放哪，数据放哪，因为太灵活了，怎么做都可以实现功能，但是怎么做才是最好的，才是最正确的呢？\r\n\r\n#### 2）[谈谈技术人员的成长](http://mp.weixin.qq.com/s?__biz=MzI4MjA4ODU0Ng==&mid=401732392&idx=1&sn=af5487a14dff9f9e3a9aa60d86eb0d55#rd)\r\n\r\n最近两三年，技术之外，花了一些时间带技术团队，也陆陆续续和大家聊了很多关于技术、管理以及成长方面的话题。聊天总归比较零散，今天以文字的形式，把我的所思、所想做一下系统的整理和总结，也许，对正在徘徊的你有所帮助呢？\r\n\r\n#### 3）[涅槃重生:我的技术转管理之路](http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=437927167&idx=1&sn=9e5cc72546c1111b335bbbb71b8318bc&scene=0&key=ac89cba618d2d97635ebfdea222c6d87a6da37221e1c8ad8703d028d79f964f533877ceb05baba85aab84a363c4e25c8&ascene=0&uin=MTYzMjY2MTE1&devicetype=iMac+MacBookPro10%2C1+OSX+OSX+10.11.2+build(15C50)&version=11020201&pass_ticket=8%2B9kCPaKWLELWhXK1Ti56wnYFeHN%2Flwihti1k%2FcCTMw%3D)\r\n\r\n我希望我的故事能够激励其他的技术同行，能够勇敢地接受新的挑战。在快速变化的移动互联网时代，快速迭代演进的不止有 App，也包括我们自己，愿大家都能活得精彩！\r\n\r\n#### 4）[为什么你应该先成为全栈工程师](https://www.phodal.com/blog/become-full-stack-first/)\r\n\r\n让我觉得我应该再写一篇文章站在全栈工程师的理由是，一本书《浮现式设计》和一个单词Re-Practise。似乎这是一个新的思考，尽管在那之前我已经写了一篇《全栈工程师的思考》，只是事隔半年之后，我又有了一些新的感触。这半年来，除了增长了一些软技能，如沟通、表达 、英语，以及一点点的技术提升之外，并没有什么太大的变化。\r\n\r\n#### 5）[Hey async, await me](http://www.alloyteam.com/2015/12/hey-async-await-me/)\r\n\r\n众所周知，ES2015来的太晚了，而现在，TC39决定加快脚步，也许每年都会有新版本发布，明年可能会发布ES2016。ES2016终于给JS带来了async/await原生支持，而其他语言如C#、Python等更早就支持上了。而async/await正是本文要重点介绍的用来解决callback hell问题的终极大杀器。 虽然离浏览器或nodejs支持ES2016还有很久很久，但依靠babel任然可以转换出当前环境就支持的代码。\r\n\r\n#### 6）[2015前端生态发展回顾](https://github.com/kuitos/kuitos.github.io/issues/32)\r\n\r\n编程技术及生态发展的三个阶段\r\n\r\n* 最初的时候人们忙着补全各种API，代表着他们拥有的东西还很匮乏，需要在语言跟基础设施上继续完善\r\n* 然后就开始各种模式，标志他们做的东西逐渐变大变复杂，需要更好的组织了\r\n* 然后就是各类分层MVC，MVP，MVVM之类，可视化开发，自动化测试，团队协同系统等等，说明重视生产效率了，也就是所谓工程化\r\n\r\n## 开源函数库与工具\r\n\r\n#### 1）[SmartAppUpdates](https://github.com/cundong/SmartAppUpdates)\r\n\r\nAndroid应用增量更新函数库，包含客户端、服务端两部分代码。\r\n\r\n#### 2）[HTextView](https://github.com/hanks-zyh/HTextView)\r\n\r\nAndroid平台上针对TextView的一个动画库，效果挺赞！\r\n\r\n![](https://raw.githubusercontent.com/hanks-zyh/HTextView/master/screenshot/demo2.gif)\r\n\r\n#### 3）[Bye2015Hi2016](https://github.com/winter-fall/Bye2015Hi2016)\r\n\r\n2015，你最开心的事情是什么？最难忘的又是什么。回望，展望；过去，将来。让我们用文字，记录过去的时光，或者畅想未来的可能吧！和我们认识的，以及认识我们的朋友们一起！","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}