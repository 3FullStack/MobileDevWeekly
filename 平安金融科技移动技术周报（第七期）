# [平安金融科技移动技术周报](https://github.com/PaicHyperionDev/MobileDevWeekly)（第七期）

## 原创专题

#### 1）[JavaScript 的另类写法 @ 诗沂](http://139.196.14.76/t/javascript/235/1)

JavaScript一种解释型的脚本语言，语法灵活，让不同的人对同一个功能有很多种不同的写法。怎样组织JavaScript代码才能让别人一眼看出你不简单呢？是否很期待别人在看完你的代码之后感叹一句“原来还可以这样写”呢？

## Android开发

#### 1）[编译时替换资源 - Android重叠包与资源合并一见](http://blog.zhaiyifan.cn/2016/02/18/android-resource-overlay/)

重叠包是什么概念呢？假设我们正在编译的是Package-1，这时候我们可以设置另外一个Package-2，用来告诉aapt，如果Package-2定义有和Package-1一样的资源，那么就用定义在Package-2的资源来替换掉定义在Package-1的资源。通过这种Overlay机制，我们就可以对资源进行定制，而又不失一般性。

#### 2）[如何更高效地使用 OkHttp](http://brucezz.github.io/articles/2016/02/21/effective-okhttp/)

OkHttp 是一个很重要的开源库。虽然它的默认配置已经提供了很好的效果，但是我们还是可以采取一些措施提高 OkHttp 的可用性和自我检查能力。

#### 3）[FlatBuffers 体验](http://www.race604.com/flatbuffers-intro/)

FlatBuffers 是一个开源的跨平台数据序列化库，可以应用到几乎任何语言（C++, C#, Go, Java, JavaScript, PHP, Python），最开始是 Google 为游戏或者其他对性能要求很高的应用开发的。

#### 4）[Intercepting everything with CoordinatorLayout Behaviors](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0224/3991.html)

如果没有深入CoordinatorLayout ，你注定无法在探索Android Design Support Library的路上走多远 － Design Library中的许多view都需要一个CoordinatorLayout。但是为什么呢？CoordinatorLayout本身并没有做太多事情：和标准的framework视图一起使用时，它就跟一个普通的FrameLayout差不多。那么它的神奇之处来自于哪里呢？

#### 5）[6个技巧加速你的gradle编译](http://blog.csdn.net/lyhhj/article/details/50718761)

最近我们都在讨论build系统，我们看了一些技巧可以让你的Maven build更快。结论和反映都势不可挡。由于我们提供的技巧，更多的人都很高兴能加快他们完成自己的项目。现在，让我们看一下怎么处理gradle编译项目。编译的项目一般都是标准编译的，也都是独一无二的。几乎所有的项目都增加了其自身的复杂性。所有的东西都不同但是有一个东西是相同的：编译会占用你的时间，加快编译会影响你的开发效率，让你的项目工作更加顺畅。

#### 6）[关于获取当前Activity的一些思考](http://droidyue.com/blog/2016/02/21/thinking-of-getting-the-current-activity-in-android/)

在Android开发过程中，我们有时候需要获取当前的Activity实例，比如弹出Dialog操作，必须要用到这个。关于如何实现由很多种思路，这其中有的简单，有的复杂，这里简单总结一下个人的一些经验吧。

#### 7）[MVVM 模式介绍](http://gold.xitu.io/entry/56cbf38771cfe40054eb3a34)

Model-View-ViewModel 就是将其中的 View 的状态和行为抽象化，让我们可以将UI和业务逻辑分开。当然这些工作 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。

## iOS开发

#### 1）[iOS 之应用性能调优的25个建议和技巧](http://blog.csdn.net/horisea/article/details/50722240)

每在优化代码之前，你都要注意一个问题，不要养成”预优化”代码的错误习惯。时常使用Instruments去profile你的代码来发现需要提升的方面。Matt Galloway写过一篇很棒的如何利用Instruments来优化代码的文章。还要注意的是，本文列出的其中一些建议是有代价的，所建议的方式会提升app的速度或者使它更加高效，但也可能需要花很多功夫去应用或者使代码变得更加复杂，所以要仔细选择。

#### 2）[Apple Pay 应用内支付流程分析](http://blog.nswebfrog.com/2016/02/20/apple-pay-analysis/)

Apple Pay 已经正式上线，ENJOY 作为国内首批接入 Apple Pay 应用内支付的 App，并且是为数不多的直接使用 PassKit Framework 和银联接口的形式接入的应用，我们在产品上与 Apple Pay 做了深度集成。接下来把我们在接入过程中的一些经验分享一下。

#### 3）[ZergHelper：成功绕过iOS App Store的代码审查的风险软件](http://www.freebuf.com/articles/terminal/96898.html)

Apple 官方的iOS App Store一直以来都以严格的代码审查著称，这项强制性的措施已经成为iOS安全生态系统中确保iOS用户的隐私和安全的一项重要机制。但是近期有安全人员发现，有一款APP成功绕过了Apple的代码审查机制。

## 技术纵横

#### 1）[要写易删除，而不易扩展的代码](http://blog.yongfengzhang.com/cn/blog/write-code-that-is-easy-to-delete-not-easy-to/)

好的文章总是见解独到，功底深厚而逻辑清晰。这是一篇关于如何设计、架构代码的文章。文章的观点新颖而有力。作者的观点是，我们所做的一切 —— 重构、模块化、分层，等等，都是为了让我们的代码易于被删改，都是为了让遗留代码不成为我们的负担，而不是为了代码复用。

#### 2）[提高代码质量：如何编写函数](http://luopq.com/2016/02/21/write-good-function/)

函数是实现程序功能的最基本单位，每一个程序都是由一个个最基本的函数构成的。写好一个函数是提高程序代码质量最关键的一步。本文就函数的编写，从函数命名，代码分布，技巧等方面入手，谈谈如何写好一个可读性高、易维护，易测试的函数。

#### 3）[对话架构师：亿级短视频社交「美拍」架构实战](https://segmentfault.com/a/1190000004330778)

本文系美图架构师麦俊生，在「对话架构师」活动上的分享整理，介绍短视频社交“美拍”架构实践的总结。

#### 4）[开源项目的正确打开方式：如何发明完美符合自己业务特点的轮子？](https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=402884021&idx=1&sn=cbd9c385f7eaa691c6f2eb36bfadd9d8&scene=0&uin=NTk4MzU3OTAw&key=710a5d99946419d963d7409eb19955a6c45de4f20da8270e1513e10774e9b6f075a73bf8bd4ccf2f92920b0e3a059f9d&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.1+build(15B42)&version=11020201&lang=zh_CN&pass_ticket=gs98%2B39cKhFPJRABFk5Qx41bJpAYYzzMUsM%2BiEEuDPv8Nr8UChCarMx1wyTTp9Zy)

「不重复造轮子」是软件开发的原则之一，在速度就是生命的互联网领域，越来越多的公司引入开源项目。但是你真的清楚开源项目的正确打开方式吗？

## 技术人生

#### 1）[你是在有效工作吗？](https://mp.weixin.qq.com/s?__biz=MjM5NTIzMTY2MQ==&mid=402169778&idx=1&sn=b1d0cbf29400721e7bbf9932c7e1da7f&scene=0&uin=NTk4MzU3OTAw&key=710a5d99946419d9ce3e7b7b5e31b94c4f05528584884b4a99a3e5b63ab4644fa2c2e4501aed2f610d90752fcdf11a0a&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.1+build(15B42)&version=11020201&lang=zh_CN&pass_ticket=PyhCIshzaha51BTiy3SSjrDSaB4ROX%2BcYozlKAuqQeuOV%2Bm7%2Bwk8eAuc%2FKSkw6nx)

时间对每个人都是公平的，没有谁的一小时会比谁多一分钟。但是差别就在于，这一小时六十分钟，有的人能让它过的有效，有的人只是过了一小时而已。
